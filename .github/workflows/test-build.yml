name: Test Build

run-name: "Test Build: ${{ github.event.inputs.platform }} (${{ github.event.inputs.build_type }})"

on:
    workflow_dispatch:
        inputs:
            platform:
                description: "Platform to build"
                required: true
                default: "mac"
                type: choice
                options:
                    - mac
                    - linux
                    - win
                    - all
            build_type:
                description: "Build type"
                required: true
                default: "unpacked"
                type: choice
                options:
                    - unpacked
                    - installer

jobs:
    setup:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - name: Set matrix based on platform selection
              id: set-matrix
              run: |
                  if [ "${{ github.event.inputs.platform }}" = "all" ]; then
                    echo 'matrix={"include":[{"os":"macos-latest","platform":"mac"},{"os":"ubuntu-latest","platform":"linux"},{"os":"windows-latest","platform":"win"}]}' >> $GITHUB_OUTPUT
                  elif [ "${{ github.event.inputs.platform }}" = "mac" ]; then
                    echo 'matrix={"include":[{"os":"macos-latest","platform":"mac"}]}' >> $GITHUB_OUTPUT
                  elif [ "${{ github.event.inputs.platform }}" = "linux" ]; then
                    echo 'matrix={"include":[{"os":"ubuntu-latest","platform":"linux"}]}' >> $GITHUB_OUTPUT
                  elif [ "${{ github.event.inputs.platform }}" = "win" ]; then
                    echo 'matrix={"include":[{"os":"windows-latest","platform":"win"}]}' >> $GITHUB_OUTPUT
                  fi
              shell: bash

    test-build:
        needs: setup
        runs-on: ${{ matrix.os }}

        strategy:
            matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build app
              run: |
                  if [ "${{ github.event.inputs.build_type }}" = "unpacked" ]; then
                    npm run test:${{ matrix.platform }}
                  else
                    npm run dist:${{ matrix.platform }}
                  fi
              shell: bash

            - name: Debug - List dist directory contents
              if: matrix.platform == 'mac' && github.event.inputs.build_type == 'unpacked'
              run: |
                  echo "=== Contents of dist directory ==="
                  find dist -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
                  echo "=== Full dist structure ==="
                  ls -la dist/ || echo "dist directory not found"
                  echo "=== Recursive listing ==="
                  find dist -type d -name "*mac*" 2>/dev/null || echo "No mac directories found"
              shell: bash

            - name: Set artifact paths
              id: artifacts
              run: |
                  if [ "${{ matrix.platform }}" = "mac" ] && [ "${{ github.event.inputs.build_type }}" = "unpacked" ]; then
                    echo "paths=dist/**/TaskBookly.app
                  dist/**/*.app" >> $GITHUB_OUTPUT
                    echo "name=unpacked-build-macos-app" >> $GITHUB_OUTPUT
                  elif [ "${{ matrix.platform }}" = "mac" ] && [ "${{ github.event.inputs.build_type }}" = "installer" ]; then
                    echo "paths=dist/*.dmg" >> $GITHUB_OUTPUT
                    echo "name=installer-build-macos-dmg" >> $GITHUB_OUTPUT
                  elif [ "${{ matrix.platform }}" = "linux" ] && [ "${{ github.event.inputs.build_type }}" = "unpacked" ]; then
                    echo "paths=dist/linux-unpacked/" >> $GITHUB_OUTPUT
                    echo "name=unpacked-build-linux" >> $GITHUB_OUTPUT
                  elif [ "${{ matrix.platform }}" = "linux" ] && [ "${{ github.event.inputs.build_type }}" = "installer" ]; then
                    echo "paths=dist/*.AppImage" >> $GITHUB_OUTPUT
                    echo "name=installer-build-linux" >> $GITHUB_OUTPUT
                  elif [ "${{ matrix.platform }}" = "win" ] && [ "${{ github.event.inputs.build_type }}" = "unpacked" ]; then
                    echo "paths=dist/win-unpacked/" >> $GITHUB_OUTPUT
                    echo "name=unpacked-build-windows" >> $GITHUB_OUTPUT
                  elif [ "${{ matrix.platform }}" = "win" ] && [ "${{ github.event.inputs.build_type }}" = "installer" ]; then
                    echo "paths=dist/*.exe
                  dist/*.msi" >> $GITHUB_OUTPUT
                    echo "name=installer-build-windows" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            - name: Upload ${{ github.event.inputs.build_type }} build for ${{ matrix.platform }}
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.artifacts.outputs.name }}
                  path: ${{ steps.artifacts.outputs.paths }}
                  retention-days: 30
